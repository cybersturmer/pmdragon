{
  "openapi": "3.0.2",
  "info": {
    "title": "PmDragon API",
    "version": 1,
    "description": "Web API for PmDragon service"
  },
  "paths": {
    "/api/auth/person-registration-requests/{key}/": {
      "get": {
        "operationId": "retrievePersonRegistrationRequest",
        "description": "Create a user registration request by using email and URL prefix.\nIt also can be used to get registration request by given key",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonRegistrationRequest"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/auth/person-invitation-requests/": {
      "get": {
        "operationId": "listPersonInvitationRequests",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonInvitationRequest"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/auth/person-invitation-requests/{key}/": {
      "get": {
        "operationId": "retrievePersonInvitationRequest",
        "description": "Can to be used for check does invitation requests exists by key.\nIt also can be used to update state of requests, mark it as accepted.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonInvitationRequestRetrieveUpdate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updatePersonInvitationRequest",
        "description": "Can to be used for check does invitation requests exists by key.\nIt also can be used to update state of requests, mark it as accepted.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonInvitationRequestRetrieveUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PersonInvitationRequestRetrieveUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PersonInvitationRequestRetrieveUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonInvitationRequestRetrieveUpdate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/workspaces/": {
      "get": {
        "operationId": "listWorkspaces",
        "description": "Writable endpoint for workspaces\nOf course we need to add information about current person\nto created_by and participant",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkspaceDetailed"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "post": {
        "operationId": "createWorkspace",
        "description": "Writable endpoint for workspaces\nOf course we need to add information about current person\nto created_by and participant",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceWritable"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceWritable"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceWritable"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWritable"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/workspaces/{id}/": {
      "get": {
        "operationId": "retrieveWorkspace",
        "description": "Writable endpoint for workspaces\nOf course we need to add information about current person\nto created_by and participant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Workspace.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWritable"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updateWorkspace",
        "description": "Writable endpoint for workspaces\nOf course we need to add information about current person\nto created_by and participant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Workspace.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceWritable"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceWritable"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceWritable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWritable"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateWorkspace",
        "description": "Writable endpoint for workspaces\nOf course we need to add information about current person\nto created_by and participant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Workspace.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceWritable"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceWritable"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceWritable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWritable"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "delete": {
        "operationId": "destroyWorkspace",
        "description": "Writable endpoint for workspaces\nOf course we need to add information about current person\nto created_by and participant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Workspace.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/projects/": {
      "get": {
        "operationId": "listProjects",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "post": {
        "operationId": "createProject",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/projects/{id}/": {
      "get": {
        "operationId": "retrieveProject",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updateProject",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateProject",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "delete": {
        "operationId": "destroyProject",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/persons/": {
      "get": {
        "operationId": "listPersons",
        "description": "Getting all persons in available workspaces",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/persons/{id}/": {
      "get": {
        "operationId": "retrievePerson",
        "description": "Getting all persons in available workspaces",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Person.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issues/": {
      "get": {
        "operationId": "listIssues",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "post": {
        "operationId": "createIssue",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issues/{id}/": {
      "get": {
        "operationId": "retrieveIssue",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updateIssue",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateIssue",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "delete": {
        "operationId": "destroyIssue",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issues-history/": {
      "get": {
        "operationId": "listIssueHistorys",
        "description": "",
        "parameters": [
          {
            "name": "issue",
            "required": false,
            "in": "query",
            "description": "issue",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueHistory"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issues-history/{id}/": {
      "get": {
        "operationId": "retrieveIssueHistory",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue History.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issue",
            "required": false,
            "in": "query",
            "description": "issue",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueHistory"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-types/": {
      "get": {
        "operationId": "listIssueTypeCategorys",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueType"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "post": {
        "operationId": "createIssueTypeCategory",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueType"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueType"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueType"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueType"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-types/{id}/": {
      "get": {
        "operationId": "retrieveIssueTypeCategory",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Type Category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueType"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updateIssueTypeCategory",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Type Category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueType"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueType"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueType"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateIssueTypeCategory",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Type Category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueType"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueType"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueType"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "delete": {
        "operationId": "destroyIssueTypeCategory",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Type Category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-type-icons/": {
      "get": {
        "operationId": "listIssueTypeCategoryIcons",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueTypeIcon"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-type-icons/{id}/": {
      "get": {
        "operationId": "retrieveIssueTypeCategoryIcon",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Type Icon.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeIcon"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-states/": {
      "get": {
        "operationId": "listIssueStateCategorys",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueState"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "post": {
        "operationId": "createIssueStateCategory",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueState"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueState"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueState"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueState"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-states/{id}/": {
      "get": {
        "operationId": "retrieveIssueStateCategory",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue State Category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueState"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updateIssueStateCategory",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue State Category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueState"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueState"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueState"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueState"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateIssueStateCategory",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue State Category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueState"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueState"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueState"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueState"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "delete": {
        "operationId": "destroyIssueStateCategory",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue State Category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-estimations/": {
      "get": {
        "operationId": "listIssueEstimationCategorys",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueEstimation"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "post": {
        "operationId": "createIssueEstimationCategory",
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueEstimation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueEstimation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueEstimation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueEstimation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-estimations/{id}/": {
      "get": {
        "operationId": "retrieveIssueEstimationCategory",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Estimation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueEstimation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updateIssueEstimationCategory",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Estimation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueEstimation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueEstimation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueEstimation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueEstimation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateIssueEstimationCategory",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Estimation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueEstimation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueEstimation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueEstimation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueEstimation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "delete": {
        "operationId": "destroyIssueEstimationCategory",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Estimation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-messages/": {
      "get": {
        "operationId": "listIssueMessages",
        "description": "",
        "parameters": [
          {
            "name": "issue",
            "required": false,
            "in": "query",
            "description": "issue",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueMessage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "post": {
        "operationId": "createIssueMessage",
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueMessage"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueMessage"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueMessage"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueMessage"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-messages/{id}/": {
      "get": {
        "operationId": "retrieveIssueMessage",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Message.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issue",
            "required": false,
            "in": "query",
            "description": "issue",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueMessage"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updateIssueMessage",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Message.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issue",
            "required": false,
            "in": "query",
            "description": "issue",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueMessage"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueMessage"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueMessage"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateIssueMessage",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Message.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issue",
            "required": false,
            "in": "query",
            "description": "issue",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueMessage"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueMessage"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueMessage"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "delete": {
        "operationId": "destroyIssueMessage",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Message.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issue",
            "required": false,
            "in": "query",
            "description": "issue",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-attachments/": {
      "get": {
        "operationId": "listIssueAttachments",
        "description": "This view handle anything except\ncreate (POST), cuz it's handled\nby another view IssueAttachmentUpload",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueAttachment"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "post": {
        "operationId": "createIssueAttachment",
        "description": "This view handle anything except\ncreate (POST), cuz it's handled\nby another view IssueAttachmentUpload",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueAttachment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueAttachment"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueAttachment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueAttachment"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue-attachments/{id}/": {
      "get": {
        "operationId": "retrieveIssueAttachment",
        "description": "This view handle anything except\ncreate (POST), cuz it's handled\nby another view IssueAttachmentUpload",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Attachment.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueAttachment"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updateIssueAttachment",
        "description": "This view handle anything except\ncreate (POST), cuz it's handled\nby another view IssueAttachmentUpload",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Attachment.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueAttachment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueAttachment"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueAttachment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueAttachment"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateIssueAttachment",
        "description": "This view handle anything except\ncreate (POST), cuz it's handled\nby another view IssueAttachmentUpload",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Attachment.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueAttachment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IssueAttachment"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IssueAttachment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueAttachment"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "delete": {
        "operationId": "destroyIssueAttachment",
        "description": "This view handle anything except\ncreate (POST), cuz it's handled\nby another view IssueAttachmentUpload",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Issue Attachment.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/backlogs/": {
      "get": {
        "operationId": "listProjectBacklogs",
        "description": "View for getting, editing, instance.",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BacklogWritable"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/backlogs/{id}/": {
      "get": {
        "operationId": "retrieveProjectBacklog",
        "description": "View for getting, editing, instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Project Backlog.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacklogWritable"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updateProjectBacklog",
        "description": "View for getting, editing, instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Project Backlog.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BacklogWritable"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BacklogWritable"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BacklogWritable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacklogWritable"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateProjectBacklog",
        "description": "View for getting, editing, instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Project Backlog.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BacklogWritable"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BacklogWritable"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BacklogWritable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacklogWritable"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/sprints/": {
      "get": {
        "operationId": "listSprints",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SprintWritable"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "post": {
        "operationId": "createSprint",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintWritable"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SprintWritable"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SprintWritable"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintWritable"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/sprints/{id}/": {
      "get": {
        "operationId": "retrieveSprint",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Sprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintWritable"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updateSprint",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Sprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintWritable"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SprintWritable"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SprintWritable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintWritable"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateSprint",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Sprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintWritable"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SprintWritable"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SprintWritable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintWritable"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "delete": {
        "operationId": "destroySprint",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Sprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/sprint-estimations/": {
      "get": {
        "operationId": "listSprintEstimations",
        "description": "Estimation is auto-calculated so we can just get it.",
        "parameters": [
          {
            "name": "sprint",
            "required": false,
            "in": "query",
            "description": "sprint",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SprintEstimation"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/sprint-estimations/{id}/": {
      "get": {
        "operationId": "retrieveSprintEstimation",
        "description": "Estimation is auto-calculated so we can just get it.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Sprint Estimation.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sprint",
            "required": false,
            "in": "query",
            "description": "sprint",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintEstimation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/sprint-durations/": {
      "get": {
        "operationId": "listSprintDurations",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SprintDuration"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "post": {
        "operationId": "createSprintDuration",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintDuration"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SprintDuration"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SprintDuration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintDuration"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/sprint-durations/{id}/": {
      "get": {
        "operationId": "retrieveSprintDuration",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Sprint duration.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintDuration"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "put": {
        "operationId": "updateSprintDuration",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Sprint duration.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintDuration"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SprintDuration"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SprintDuration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintDuration"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateSprintDuration",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Sprint duration.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintDuration"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SprintDuration"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SprintDuration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintDuration"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "delete": {
        "operationId": "destroySprintDuration",
        "description": "View for getting, editing, deleting instance.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this Sprint duration.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/auth/obtain/": {
      "post": {
        "operationId": "createTokenObtainPairExtended",
        "description": "Takes a set of user credentials and returns an access and refreshes JSON web\ntoken pair to prove the authentication of those credentials.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenObtainPairExtended"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenObtainPairExtended"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TokenObtainPairExtended"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenObtainPairExtended"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/auth/refresh/": {
      "post": {
        "operationId": "createTokenRefresh",
        "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRefresh"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/auth/password/": {
      "post": {
        "operationId": "createUser",
        "description": "Set password for user",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSetPassword"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserSetPassword"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserSetPassword"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetPassword"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/auth/persons/": {
      "post": {
        "operationId": "createPerson",
        "description": "Create a Person object linked to User after confirmation email.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonRegistrationOrInvitationRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PersonRegistrationOrInvitationRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PersonRegistrationOrInvitationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonRegistrationOrInvitationRequest"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/auth/person-registration-requests/": {
      "post": {
        "operationId": "createPersonRegistrationRequest",
        "description": "Create a user registration request by using email and URL prefix.\nIt also can be used to get registration request by given key",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonRegistrationRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PersonRegistrationRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PersonRegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonRegistrationRequest"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/person-invitation-requests/": {
      "post": {
        "operationId": "createPersonInvitationRequest",
        "description": "Can be useful for bulk create requests by giving\n1) Email\n2) Workspace prefix",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonInvitationRequestList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PersonInvitationRequestList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PersonInvitationRequestList"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonInvitationRequestList"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/auth/me/": {
      "put": {
        "operationId": "updateUser",
        "description": "We use this view for updating user data such as:\n - First Name\n - Last Name\n - username",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "patch": {
        "operationId": "partialUpdateUser",
        "description": "We use this view for updating user data such as:\n - First Name\n - Last Name\n - username",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/auth/avatar/": {
      "put": {
        "operationId": "updatePersonAvatarUpload",
        "description": "Person avatar picture APIView\nWe need it to upload user avatar and update it.",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      },
      "delete": {
        "operationId": "destroyPersonAvatarUpload",
        "description": "Person avatar picture APIView\nWe need it to upload user avatar and update it.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    },
    "/api/core/issue/ordering/": {
      "put": {
        "operationId": "UpdateIssueOrdering",
        "description": "Bulk update issues ordering, doesn't matter is it a Backlog\nor Sprint or Agile Board.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "minimum": 1,
                      "nullable": false
                    },
                    "ordering": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 32767,
                      "nullable": true
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "minimum": 1,
                      "nullable": false
                    },
                    "ordering": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 32767,
                      "nullable": true
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "minimum": 1,
                      "nullable": false
                    },
                    "ordering": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 32767,
                      "nullable": true
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueChildOrdering"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "api"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "PersonRegistrationRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 128
          },
          "prefix_url": {
            "type": "string",
            "description": "String should contain from 3 to 20 small english letters without special chars",
            "pattern": "^[-a-zA-Z0-9_]+$",
            "maxLength": 20
          }
        },
        "required": [
          "email",
          "prefix_url"
        ]
      },
      "PersonInvitationRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 128
          },
          "workspace": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "expired_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "email",
          "workspace"
        ]
      },
      "PersonInvitationRequestRetrieveUpdate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true
          },
          "workspace": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "prefix_url": {
                "type": "string",
                "description": "String should contain from 3 to 20 letters and numbers without special chars",
                "pattern": "^[a-zA-Z0-9]{3,20}$",
                "maxLength": 20
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "owned_by": {
                "type": "integer",
                "nullable": true
              },
              "participants": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "required": [
              "prefix_url"
            ],
            "readOnly": true
          },
          "is_accepted": {
            "type": "boolean",
            "writeOnly": true
          }
        }
      },
      "WorkspaceDetailed": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "prefix_url": {
            "type": "string",
            "description": "String should contain from 3 to 20 letters and numbers without special chars",
            "pattern": "^[a-zA-Z0-9]{3,20}$",
            "maxLength": 20
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "readOnly": true
                },
                "username": {
                  "type": "string",
                  "readOnly": true
                },
                "email": {
                  "type": "string",
                  "readOnly": true
                },
                "avatar": {
                  "type": "string",
                  "format": "binary",
                  "nullable": true
                },
                "first_name": {
                  "type": "string",
                  "readOnly": true
                },
                "last_name": {
                  "type": "string",
                  "readOnly": true
                },
                "title": {
                  "type": "string",
                  "readOnly": true
                },
                "is_active": {
                  "type": "string",
                  "readOnly": true
                },
                "last_login": {
                  "type": "string",
                  "readOnly": true
                },
                "created_at": {
                  "type": "string",
                  "readOnly": true
                }
              }
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "readOnly": true
                },
                "title": {
                  "type": "string",
                  "maxLength": 255
                },
                "key": {
                  "type": "string",
                  "description": "Short word (must not exceed 10 characters) to mark project",
                  "maxLength": 10,
                  "pattern": "^[-a-zA-Z0-9_]+$"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "readOnly": true
                },
                "workspace": {
                  "type": "integer"
                },
                "owned_by": {
                  "type": "integer",
                  "nullable": true
                }
              },
              "required": [
                "title",
                "key",
                "workspace"
              ]
            },
            "readOnly": true
          }
        },
        "required": [
          "prefix_url",
          "participants"
        ]
      },
      "WorkspaceWritable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "prefix_url": {
            "type": "string",
            "description": "String should contain from 3 to 20 letters and numbers without special chars",
            "pattern": "^[a-zA-Z0-9]{3,20}$",
            "maxLength": 20
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "prefix_url"
        ]
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "workspace": {
            "type": "integer"
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "key": {
            "type": "string",
            "description": "Short word (must not exceed 10 characters) to mark project",
            "maxLength": 10,
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "owned_by": {
            "type": "integer",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "workspace",
          "title",
          "key"
        ]
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "readOnly": true
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "readOnly": true
          },
          "last_name": {
            "type": "string",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "readOnly": true
          },
          "is_active": {
            "type": "string",
            "readOnly": true
          },
          "last_login": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Issue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "workspace": {
            "type": "integer"
          },
          "project": {
            "type": "integer"
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string"
          },
          "type_category": {
            "type": "integer",
            "nullable": true
          },
          "state_category": {
            "type": "integer",
            "nullable": true
          },
          "estimation_category": {
            "type": "integer",
            "nullable": true
          },
          "assignee": {
            "type": "integer",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "created_by": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "ordering": {
            "type": "integer",
            "maximum": 32767,
            "nullable": true,
            "minimum": 0
          }
        },
        "required": [
          "workspace",
          "project",
          "title"
        ]
      },
      "IssueHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "entry_type": {
            "type": "string",
            "description": "We use this to set icon in timeline.",
            "maxLength": 255
          },
          "edited_field": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "before_value": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "after_value": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "changed_by": {
            "type": "integer",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "entry_type"
        ]
      },
      "IssueType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "workspace": {
            "type": "integer"
          },
          "project": {
            "type": "integer"
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "icon": {
            "type": "integer",
            "nullable": true
          },
          "is_subtask": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          },
          "ordering": {
            "type": "integer",
            "maximum": 32767,
            "nullable": true,
            "minimum": 0
          }
        },
        "required": [
          "workspace",
          "project",
          "title"
        ]
      },
      "IssueTypeIcon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "prefix": {
            "type": "string",
            "maxLength": 50
          },
          "color": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          }
        },
        "required": [
          "prefix"
        ]
      },
      "IssueState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "workspace": {
            "type": "integer"
          },
          "project": {
            "type": "integer"
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "is_default": {
            "type": "boolean"
          },
          "is_done": {
            "type": "boolean",
            "description": "Is task completed when moved to this column?"
          },
          "ordering": {
            "type": "integer",
            "maximum": 32767,
            "nullable": true,
            "minimum": 0
          }
        },
        "required": [
          "workspace",
          "project",
          "title"
        ]
      },
      "IssueEstimation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "workspace": {
            "type": "integer"
          },
          "project": {
            "type": "integer"
          },
          "title": {
            "type": "string",
            "description": "You can call it by T-shirt size or like banana",
            "maxLength": 255
          },
          "value": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "description": "This value is for calculating team velocity"
          }
        },
        "required": [
          "workspace",
          "project",
          "title",
          "value"
        ]
      },
      "IssueMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "issue": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "created_by": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "issue"
        ]
      },
      "IssueAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "workspace": {
            "type": "integer"
          },
          "project": {
            "type": "integer"
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "attachment": {
            "type": "string",
            "format": "binary",
            "readOnly": true
          },
          "attachment_size": {
            "type": "integer",
            "maximum": 9223372036854775807,
            "format": "int64",
            "description": "How big attachment is",
            "minimum": 0
          },
          "show_preview": {
            "type": "boolean",
            "description": "If yes - we can show small preview of file"
          },
          "icon": {
            "enum": [
              "mdi-microsoft-excel",
              "mdi-microsoft-word",
              "mdi-microsoft-powerpoint",
              "mdi-file-pdf",
              "mdi-file-video",
              "mdi-file-document",
              "mdi-zip-box",
              "mdi-language-python",
              "mdi-language-javascript",
              "mdi-language-html5",
              "mdi-language-typescript",
              "mdi-language-cpp",
              "mdi-language-c",
              "mdi-language-csharp",
              "mdi-language-go",
              "mdi-language-kotlin",
              "mdi-language-lua",
              "mdi-language-fortran",
              "mdi-language-haskell",
              "mdi-language-markdown",
              "mdi-language-php",
              "mdi-language-r",
              "mdi-language-ruby",
              "mdi-language-rust",
              "mdi-language-swift",
              "mdi-language-xaml",
              "mdi-language-java",
              "mdi-file-image"
            ],
            "type": "string"
          },
          "created_by": {
            "type": "integer",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "workspace",
          "project",
          "title",
          "attachment_size"
        ]
      },
      "BacklogWritable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "workspace": {
            "type": "integer"
          },
          "project_id": {
            "type": "string",
            "readOnly": true
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "workspace"
        ]
      },
      "SprintWritable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "workspace": {
            "type": "integer"
          },
          "project": {
            "type": "integer"
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "goal": {
            "type": "string",
            "maxLength": 255
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "is_started": {
            "type": "boolean"
          },
          "is_completed": {
            "type": "boolean"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "workspace",
          "project",
          "started_at",
          "finished_at"
        ]
      },
      "SprintEstimation": {
        "type": "object",
        "properties": {
          "point_at": {
            "type": "string",
            "format": "date-time",
            "description": "We need this point for manual sorting"
          },
          "total_value": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "done_value": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "estimated_value": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "total_value",
          "done_value"
        ]
      },
      "SprintDuration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "workspace": {
            "type": "integer"
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "duration": {
            "type": "string"
          }
        },
        "required": [
          "workspace",
          "title",
          "duration"
        ]
      },
      "TokenObtainPairExtended": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "TokenRefresh": {
        "type": "object",
        "properties": {
          "refresh": {
            "type": "string"
          }
        },
        "required": [
          "refresh"
        ]
      },
      "UserSetPassword": {
        "type": "object",
        "properties": {
          "old_password": {
            "type": "string",
            "writeOnly": true,
            "maxLength": 128
          },
          "new_password1": {
            "type": "string",
            "writeOnly": true,
            "maxLength": 128
          },
          "new_password2": {
            "type": "string",
            "writeOnly": true,
            "maxLength": 128
          }
        },
        "required": [
          "old_password",
          "new_password1",
          "new_password2"
        ]
      },
      "PersonRegistrationOrInvitationRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "writeOnly": true,
            "maxLength": 128
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "maxLength": 30
          },
          "is_invited": {
            "type": "boolean",
            "writeOnly": true
          }
        },
        "required": [
          "key",
          "password",
          "is_invited"
        ]
      },
      "PersonInvitationRequestList": {
        "type": "object",
        "properties": {
          "invites": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "maxLength": 128
                },
                "workspace": {
                  "type": "integer"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "readOnly": true
                },
                "expired_at": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": [
                "email",
                "workspace"
              ]
            }
          }
        },
        "required": [
          "invites"
        ]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "pattern": "^[\\w.@+-]+\\z",
            "maxLength": 150
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          }
        },
        "required": [
          "username"
        ]
      },
      "IssueChildOrdering": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "ordering": {
            "type": "integer",
            "maximum": 32767,
            "nullable": true,
            "minimum": 0
          }
        },
        "required": [
          "id"
        ]
      }
    }
  }
}