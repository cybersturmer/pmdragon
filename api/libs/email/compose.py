from datetime import datetime

from django.conf import settings
from django.core.mail import send_mail
from django.template.loader import render_to_string

from apps.core.models import Person


class EmailComposer:
    def __init__(self):
        self.subject = ''
        self.message = ''
        self.html_message = ''
        self.from_email = settings.EMAIL_FROM_BY_DEFAULT
        self.to_email = ''

    def _send(self):
        send_mail(
            subject=self.subject,
            html_message=self.html_message,
            message=self.message,
            from_email=self.from_email,
            recipient_list=[self.to_email],
            fail_silently=False,
        )

    def verify_registration(self, key: str, prefix_url: str, expired_at: datetime, email: str):
        self.subject = 'PMDragon verification email'
        action_link = f'{settings.HOST_BY_DEFAULT}/verify/registration/{key}'
        context = {
            'action_link': action_link,
            'prefix_url': prefix_url,
            'expired_at': expired_at,
        }

        self.html_message = render_to_string('email/verification/registration.html', context)
        self.to_email = email
        self._send()

    def verify_collaboration(self, key: str, prefix_url: str, expired_at, person: Person):
        """
        If Person was invited to a workspace he was not belong.
        Person can accept it or ignore
        @param key: String, generated by API
        @param prefix_url: standard String of workspace
        @param expired_at: expired_at date for invitation
        @param person: Person model
        @return: None
        """
        self.subject = 'PmDragon join workspace verification'
        action_link = f'{settings.HOST_BY_DEFAULT}/verify/collaboration/{key}'
        context = {
            'action_link': action_link,
            'prefix_url': prefix_url,
            'expired_at': expired_at,
            'person': person
        }

        self.html_message = render_to_string('email/verification/collaboration.html', context)
        self.to_email = person.email
        self._send()

    def verify_invitation(self, key: str, prefix_url: str, expired_at: datetime, email: str):
        """
        If Person with given email do not exists and can register by given link or just ignore it
        @param key: String, generated by API
        @param prefix_url: standard String of workspace
        @param expired_at: expired_at date for invitation
        @param email: Email of invited person
        @return: None
        """
        self.subject = 'PmDragon invitation to workspace'
        action_link = f'{settings.HOST_BY_DEFAULT}/verify/invitation/{key}'
        context = {
            'action_link': action_link,
            'prefix_url': prefix_url,
            'expired_at': expired_at
        }

        self.html_message = render_to_string('email/verification/invitation.html', context)
        self.to_email = email
        self._send()

    def mentioning_in_issue_message(self, mentioned_by: Person, email: str):
        self.subject = 'PmDragon mentioned by'
        context = {
            'mentioned_by': mentioned_by
        }

        self.html_message = render_to_string('email/messaging/mentioning.html', context)
        self.to_email = email
        self._send()

    def mentioning_in_issue_description(self, email: str):
        self.subject = 'PmDragon mentioned by'
        context = {}

        self.html_message = render_to_string('email/issue/mentioning.html', context)
        self.to_email = email
        self._send()
